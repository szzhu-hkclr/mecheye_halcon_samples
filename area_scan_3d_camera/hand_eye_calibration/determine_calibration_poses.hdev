<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="24.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>*</c>
<c>* This sample program is used to determine the calibration poses used during the hand-eye calibration. </c>
<c>* During hand-eye calibration, the camera needs to obtain images of the calibration board at a series of robot poses. These robot poses are the calibration poses.</c>
<c>* Please refer to the README file for detailed explanation of the entire process.</c>
<c>*</c>
<c></c>
<c>* Discover all available cameras and store them in the "MechEyeCameras" variable.</c>
<c>* You can replace "MechEye" with the "user_name" or "unique_name" of the camera that needs to be connected.</c>
<l>DeviceInfo := 'MechEye'</l>
<l>info_framegrabber ('GigEVision2', 'device', Info, DeviceInfos)</l>
<l>tuple_regexp_select(DeviceInfos, DeviceInfo, MechEyeCameras)</l>
<l>dev_inspect_ctrl (MechEyeCameras)</l>
<c>* Stop execution if no cameras are found.</c>
<l>if (not |MechEyeCameras|)</l>
<l>    stop()</l>
<l>endif</l>
<c></c>
<c>* Connect to the camera: if "user_name" or "unique_name" is not set in "DeviceInfo", the first camera in "MechEyeCameras" will be connected. </c>
<l>open_framegrabber ('GigEVision2', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', MechEyeCameras[0], 0, -1, AcqHandle)</l>
<c></c>
<c>* Obtain the available parameter names.</c>
<l>get_framegrabber_param (AcqHandle, 'available_param_names', ParameterValues)</l>
<c>* Obtain the firmware version of the camera.</c>
<l>get_framegrabber_param (AcqHandle, 'DeviceFirmwareVersion', FirmwareVersion)</l>
<c>* Stop execution if the firmware version is lower than 2.1.0.</c>
<l>if (FirmwareVersion &lt; '2.1.0')</l>
<l>    stop()</l>
<l>endif</l>
<c></c>
<c>* Set the "DeviceScanType" parameter to "Areascan" to obtain the 2D image.</c>
<l>set_framegrabber_param (AcqHandle, 'DeviceScanType', 'Areascan')</l>
<c>* Set the "grab_timeout" parameter.</c>
<c>* The "grab_timeout" parameter defines the maximum time in milliseconds that the frame grabber will wait for an image to be grabbed before timing out.</c>
<l>set_framegrabber_param (AcqHandle, 'grab_timeout', 10000)</l>
<c>* Set the calibration board model.</c>
<c>* Replace "BDB-5" with the calibration board model in use. </c>
<c>* Possible values include BDB-5, BDB-6, BDB-7, OCB-005, OCB-010, OCB-015, OCB-020, CGB-020, CGB-035, and CGB-050.</c>
<l>setboardType('BDB-5',boardType)</l>
<l>set_framegrabber_param (AcqHandle, 'BoardType', boardType)</l>
<c></c>
<c>* Start determining the calibration poses. </c>
<c>* Record the determined calibration poses in the "robot_pose" JSON file.</c>
<l>Text := 'Press the key that represents the action you want to perform:' + '\n' + 'P - obtain the original 2D image;' + '\n' + 'T - obtain the 2D image with the feature detection results;' + '\n' + 'Q - quit the process'</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>dev_set_window (WindowHandle)</l>
<l>while(true)    </l>
<l>    grab_image(Image, AcqHandle)</l>
<l>    get_framegrabber_param (AcqHandle, 'ExtrinErrCode', ErrCode)</l>
<l>    disp_text (WindowHandle, Text, 'window', 'top', 'center', 'forest green', [], [])</l>
<c>    * Read keyboard input.</c>
<l>    read_char (WindowHandle, Char, ReCode)</l>
<l>    if (Char == 'q' or Char =='Q')</l>
<l>        break</l>
<l>    endif</l>
<l>    if (Char == 'p'or Char =='P')</l>
<l>        set_framegrabber_param (AcqHandle, 'Test Collect', false)</l>
<l>    endif</l>
<l>    if (Char == 't'or Char =='T')</l>
<l>        set_framegrabber_param (AcqHandle, 'Test Collect', true)</l>
<l>        set_framegrabber_param (AcqHandle, 'UserSetLoad', 0)</l>
<l>    endif</l>
<l>endwhile</l>
<l>set_framegrabber_param (AcqHandle, 'Test Collect', false)</l>
<c>* Close the frame grabber.</c>
<l>close_framegrabber (AcqHandle)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="setboardType">
<interface>
<ic>
<par name="input" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="output" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>tuple_regexp_replace (input, ['-0*','replace_all'], '_', output)</l>
<l>return ()</l>
</body>
<docu id="setboardType">
<parameters>
<parameter id="input"/>
<parameter id="output"/>
</parameters>
</docu>
</procedure>
</hdevelop>
